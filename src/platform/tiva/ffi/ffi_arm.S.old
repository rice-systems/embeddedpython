
/* -----------------------------------------------------------------------
   sysv.S - Copyright (c) 1998, 2008, 2011 Red Hat, Inc.
	    Copyright (c) 2011 Plausible Labs Cooperative, Inc.
   
   ARM Foreign Function Interface 

   Permission is hereby granted, free of charge, to any person obtaining
   a copy of this software and associated documentation files (the
   ``Software''), to deal in the Software without restriction, including
   without limitation the rights to use, copy, modify, merge, publish,
   distribute, sublicense, and/or sell copies of the Software, and to
   permit persons to whom the Software is furnished to do so, subject to
   the following conditions:

   The above copyright notice and this permission notice shall be included
   in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED ``AS IS'', WITHOUT WARRANTY OF ANY KIND,
   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
   NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
   HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
   WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
   ----------------------------------------------------------------------- */

.macro ARM_FUNC_START name
 .text
 .align 0
 .cpu cortex-m3 



 .globl \name; .type \name,%function; \name:

 .fnstart
.endm


.macro RETLDM regs=, cond=, dirn=ia
 .ifc "\regs",""
 ldr\cond pc, [sp], #4
 .else
 ldm\cond\dirn sp!, {\regs, pc}
 .endif

.endm

 @ r0: ffi_prep_args
 @ r1: &ecif
 @ r2: cif->bytes
 @ r3: fig->flags
 @ sp+0: ecif.rvalue

 @ This assumes we are using gas.
ARM_FUNC_START ffi_call_SYSV
 @ Save registers
        stmfd sp!, {r0-r3, fp, lr}
 .save {r0-r3, fp, lr}
 mov fp, sp

 .setfp fp, sp

 @ Make room for all of the new args.
 sub sp, fp, r2

 @ Place all of the ffi_prep_args in position
 mov r0, sp
 @ r1 already set

 @ Call ffi_prep_args(stack, &ecif)
 bl ffi_prep_args

 @ move first 4 parameters in registers
 ldmia sp, {r0-r3}

 @ and adjust stack
 sub lr, fp, sp @ cif->bytes == fp - sp
 ldr ip, [fp] @ load fn() in advance
 cmp lr, #16
 movhs lr, #16
 add sp, sp, lr

 @ call (fn) (...)
 blx ip

 @ Remove the space we pushed for the args
 mov sp, fp

 @ Load r2 with the pointer to storage for the return value
 ldr r2, [sp, #24]

 @ Load r3 with the return type code
 ldr r3, [sp, #12]

 @ If the return value pointer is NULL, assume no return value.
 cmp r2, #0
 beq .Lepilogue

@ return INT
 cmp r3, #1

 cmpne r3, #2

 streq r0, [r2]
 beq .Lepilogue

 @ return INT64
 cmp r3, #12

 cmpne r3, #3

 stmeqia r2, {r0, r1}
.Lepilogue:




 ldmia sp!, {r0-r3,fp, pc}


.ffi_call_SYSV_end:
 .fnend

        .size ffi_call_SYSV,.ffi_call_SYSV_end-ffi_call_SYSV

