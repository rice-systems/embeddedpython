# src/tools/build/pmMakeConstStrings.py
#
# Builds the constant string database. The output of this file should NOT be
# modified directly. That will lead to heinous, heinous things.
#
# Copyright 2012 Rice University.
#
# This file is part of the Owl Embedded Python System and is provided under
# the MIT open-source license. See the LICENSE and COPYING files for details
# about your rights to use, modify, and distribute Owl.

import sys

LOAD_FUNCTION = r'''
# DO NOT EDIT THIS AUTOGENERATED FILE!
def _load_consts(t):
    r"""__NATIVE__
    pPmTuple_t ptup;
    pPmObj_t pobj;
    PmReturn_t retval;
    int16_t i;

    // we can't handle exceptions yet, so use assertions to
    // stop the interpreter in case of error.

    C_ASSERT(NATIVE_GET_NUM_ARGS() == 1);

    ptup = (pPmTuple_t) NATIVE_GET_LOCAL(0);
    C_ASSERT(NUM_CONSTANTS == tuple_getLength(ptup));
    
    for (i=0; i<NUM_CONSTANTS; i++) {
        retval = tuple_getItem(ptup, i, &pobj);
        C_ASSERT(retval == PM_RET_OK);

        gVmGlobal.consts[i] = pobj;
    }

    NATIVE_SET_TOS(PM_TRUE);
    return retval;
    """
    pass


'''

def make_python(strings):
    pyfile = open('__consts.py', 'w')

    pyfile.write(LOAD_FUNCTION)

    strings = ["'%s'" % s for s in strings]
    call = "_load_consts((%s))\n" % ", ".join(strings)

    pyfile.write(call)
    pyfile.close()

def make_h(strings):
    cfile = open('consts.h', 'w')
    
    cfile.write('/* DO NOT EDIT THIS FILE! */\n')

    for n, s in enumerate(strings):
        cfile.write("#define CONST%s gVmGlobal.consts[%d]\n" % (s, n))

    cfile.write("#define NUM_CONSTANTS %d\n" % len(strings))
    cfile.close()

if __name__ == "__main__":
    strings = [s.strip() for s in open(sys.argv[1]).readlines()]
    strings = [s for s in strings if s]
    make_python(strings)
    make_h(strings)
